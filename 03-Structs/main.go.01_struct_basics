package main

import "fmt"

// Structs
// *******
//	- A Data Structure in Go, used widely throughout Go
//	- A collection of properties that are related together
//	- More flexible properties than just a single string type
//	- Similar to Python Dictionary, but not an "object"
//	- Can be used to represent complex data structures
// 	- We can embbed one struct inside of another struct

type contactInfo struct {
	email    string
	zip_code int
}
type person struct {
	first_name string
	last_name  string
	contact    contactInfo
}

func main() {

	// Creating a value of type person
	// The order of the fields can be used, but this is not recommended
	alex := person{
		"Alex",
		"Anderson",
		contactInfo{
			"alex@anderson.com",
			12345,
		},
	}
	fmt.Println(alex)

	// Instead, of relying on the order of the field, we should use named fields
	// This style does not depend on the order of the fields
	maria := person{
		first_name: "Maria",
		last_name:  "Anderson",
		contact: contactInfo{
			email:    "maria@andercon.com",
			zip_code: 98765,
		},
	}
	fmt.Println(maria)

	// We can also declare then assign later
	// The variable would be assigned its zero-value
	//	string	-> ""
	//	int		-> 0
	//	float64	-> 0
	//	bool	-> false
	var julie person

	// To print a struct with key: value format, use %+v
	fmt.Printf("%+v\n", julie)

	julie.first_name = "Julie"
	julie.last_name = "Arkorius"
	fmt.Printf("%+v\n", julie)

}

// > go run main.go
// > go build main.go && ./main.exe
