// Package
// *******
package main

// Imports
// *******
import "fmt"

// Functions
// *********

func main() {

	// Arrays and Slices
	// *****************
	// 2 Types of Data Structures in Go for handling lists
	//
	//	- Array
	//		- Basic
	//		- Fixed-length, primitive Data Structure for lists
	//		- All elements must have the same type
	//	- Slice
	//		- A bit advanced
	//		- Can grow or shrink in length
	//		- All elements must have the same type
	//		- variable := []type{values}

	// Variable: Slice
	cards := []string{"Ace of Diamonds", newCard()} // "cards" is a slice of strings

	// Adding new elements to a slice
	// 	- Appending does not modify the existing value
	// 	- Instead, it returns a new value with the modification added
	//	- Pure Function
	cards = append(cards, "6 of Spades")

	// Iteration
	// *********
	// 	- "for" - For iterating over a closed-set (finite set) of elements
	// 		- "range <slice>" - The range of slice we want to iterate over
	// 	- With for-loops, the iteration variables are re-declared at each iteration
	//		- So we have to use :=
	// 	- Every declared variable must be used
	//		- If <index> or <value> is not going to be used in the loop body, replace with _
	for index, card := range cards {
		fmt.Println(index, "--", card)
	}
}

// Helper Functions
// ****************
//	- Basic Format: func <name>(<args>) <returnType?> { <body> ... <return?> }
// 	- A function returning a value needs to declare its return type in its declaration
//	- If the function returns nothing, skip the <returnType>
func newCard() string {
	return "5 of Diamonds"
}
