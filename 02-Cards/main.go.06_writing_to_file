package main

// Writing To File
// ***************
// To deal with underlying OS files, we make use of the "io/ioutil" standard package
//	- Use "WriteFile(filename string, data []byte, permissions)" to write to a file
//		- []byte - Essentially a string of characters
//			- Every element inside a Byte Slice correspond to an ascii character code
//			- We can use asciitable.com as XWalk table
//			- A Byte Slice is just another way to represent a string
import (
	"fmt"
	"io/ioutil"
)

func main() {

	// Using Type Conversion: String to []byte
	// 	To use WriteFile(), we have to convert the string to []byte
	//	WriteFile() only takes []byte
	greeting_str := "Hello World!"
	greeting_byte := []byte(greeting_str)

	fmt.Println(greeting_byte)

	// Now, we can use WriteFile(filename, byte_slice, permission)
	//	We will just use a permission of 0666 (read/write)
	//	WriteToFile returns an error type by default
	// 	We can use that with error handling later, but for now, we will just ignore
	_ = ioutil.WriteFile("datasave_hello_world.tmp", greeting_byte, 0666)
}

// > go run main.go deck.go
// > go build main.go deck.go && ./main.exe
